name: Validar Quiz IoC, DIP e DI (Primeira Alternativa Correta) e Mudar Status para Review no Projeto

on:
  push:
    paths:
      - '.github/workflows/quiz_validation.yml'

permissions:
  issues: write
  contents: read

jobs:
  validar_quiz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v2

      - name: Obter conteúdo da issue
        id: obter_issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueTitulo = "Desafio quiz: IoC, DIP e DI";
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
            });

            const issue = issues.data.find(i => i.title === issueTitulo);

            if (!issue) {
              console.log(`Issue "${issueTitulo}" não encontrada.`);
              return;
            }

            core.setOutput('issueNumber', issue.number);
            core.setOutput('issueBody', JSON.stringify(issue.body));
            return issue.body;

      - name: Validar respostas do quiz
        id: validar_respostas
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const issueBody = JSON.parse('${{ steps.obter_issue.outputs.issueBody }}');
              const issueNumber = ${{ steps.obter_issue.outputs.issueNumber }};

              if (!issueBody) return;

              const respostasCorretas = {
                "1": "Uma disciplina.",
                "2": "Sim.",
                "3": "Um padrão de design que permite injetar dependências, proporcionando baixo acoplamento.",
                "4": "*IoC* determina como as dependências devem ser resolvidas em uma aplicação, enquanto *DIP* refere-se ao processo de delegar o controle de criação de objetos a um mecanismo externo."
              };

              const respostasUsuario = {};
              const perguntas = issueBody.split("# ");

              perguntas.slice(1).forEach(pergunta => {
                const numeroPergunta = pergunta.split(" - ")[0];
                const opcoes = pergunta.split("- [");

                opcoes.slice(1).forEach(opcao => {
                  if (opcao.startsWith("x")) {
                    respostasUsuario[numeroPergunta] = opcao.split("] ")[1].trim();
                  }
                });
              });

              let feedback = "## Resultado do Quiz\n\n";
              let todasCorretas = true;

              function cleanString(str) {
                return str.replace(/[\u200B-\u200F\uFEFF\u00A0]/g, '').trim();
              }

              for (const numeroPergunta in respostasCorretas) {
                const respostaCorreta = cleanString(respostasCorretas[numeroPergunta]);
                const respostaUsuario = respostasUsuario[numeroPergunta] ? cleanString(respostasUsuario[numeroPergunta]) : "";

                if (respostaUsuario === respostaCorreta) {
                  feedback += `✅ Pergunta ${numeroPergunta}: Resposta correta!\n`;
                } else {
                  feedback += `❌ Pergunta ${numeroPergunta}: Resposta incorreta. Resposta correta: ${respostasCorretas[numeroPergunta]}\n`;
                  todasCorretas = false;
                }
              }

              if (todasCorretas) {
                feedback += "\nParabéns! Você acertou todas as perguntas do quiz.";
              } else {
                feedback += "\nPor favor, revise suas respostas e tente novamente.";
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: feedback,
              });

              // Move issue to Review column in project
              const projectName = "@MateusKSC's board project"; // Nome do seu projeto
              const columnName = "Review"; // Nome da coluna "Review"

              const projects = await github.rest.projects.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "open"
              });

              const project = projects.data.find(p => p.name === projectName);

              if (!project) {
                console.log(`Projeto "${projectName}" não encontrado.`);
                return;
              }

              const columns = await github.rest.projects.listColumns({
                project_id: project.id
              });

              const column = columns.data.find(c => c.name === columnName);

              if (!column) {
                console.log(`Coluna "${columnName}" não encontrada.`);
                return;
              }

              await github.rest.projects.createCard({
                column_id: column.id,
                content_id: issueNumber,
                content_type: "Issue"
              });

              console.log(`Issue #${issueNumber} moved to column "${columnName}" in project "${projectName}".`);

            } catch(e){
              console.log(e);
            }
