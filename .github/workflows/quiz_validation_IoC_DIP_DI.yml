name: Validar Quiz IoC, DIP e DI (Primeira Alternativa Correta)

on:
  workflow_dispatch:
    inputs:
      content_node_id:
        description: 'The content node ID (Issue ID)'
        required: true
        type: string
      project_id:
        description: 'The project ID'
        required: true
        type: string
      other_project_data:
        description: 'The full json payload of the github project event'
        required: true
        type: string

permissions: write-all

jobs:
  move_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Add "Done" label to issue 6
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            const issueNumber = 6;
            await github.rest.issues.addLabels({
              issue_number: issueNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['Done']
            });
            console.log(`Added "Done" label to issue #${issueNumber}`);
      - name: Move issue 6 to Done Column.
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ORG_PAT }}
          script: |
            const projectId = "${{ github.event.inputs.project_id }}";
            const issueNumber = 6;
            const projectItemsQuery = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                    fields(first: 100) {
                      nodes {
                        id
                        name
                        ... on ProjectV2ItemFieldSingleSelect {
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            try {
              const projectItemsResult = await github.graphql(projectItemsQuery);
              const projectItems = projectItemsResult.node.items.nodes;
              const item = projectItems.find(i => i.content?.number === issueNumber);
              if (!item) {
                core.setFailed(`Issue ${issueNumber} nÃ£o encontrada no projeto.`);
                return;
              }
              const doneColumn = projectItemsResult.node.fields.nodes.find(field => field.__typename === "ProjectV2ItemFieldSingleSelect" && field.name === "Done");
              const doneOption = doneColumn.options.find(option => option.name === "Done");
              const moveIssueMutation = `
                mutation {
                  updateProjectV2ItemPosition(input: {
                    projectId: "${projectId}",
                    itemId: "${item.id}",
                    afterId: null,
                    fieldValueId: "${doneOption.id}"
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              const moveResult = await github.graphql(moveIssueMutation);
              console.log(`[DEBUG] Move Issue Result: ${JSON.stringify(moveResult)}`);
            } catch (error) {
              core.setFailed(`Error moving issue: ${error.message}`);
              console.error(`Error: ${error}`);
            }
