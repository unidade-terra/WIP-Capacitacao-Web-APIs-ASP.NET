name: Validar Quiz IoC, DIP e DI (Primeira Alternativa Correta)

on:
  workflow_dispatch:
    inputs:
      content_node_id:
        description: 'The content node ID (Issue ID)'
        required: true
        type: string
      project_id:
        description: 'The project ID'
        required: true
        type: string
      other_project_data:
        description: 'The full json payload of the github project event'
        required: true
        type: string
  push:
    paths:
      - '.github/workflows/quiz_validation_IoC_DIP_DI.yml'

permissions:
  issues: write
  projects: write

jobs:
  validar_quiz:
    runs-on: ubuntu-latest
    steps:
      - name: Get Issue Number from Node ID
        id: get_issue_number
        uses: actions/github-script@v6
        with:
          script: |
            const contentNodeId = "${{ github.event.inputs.content_node_id }}";
            const query = `
              query {
                node(id: "${contentNodeId}") {
                  ... on Issue {
                    number
                  }
                }
              }
            `;

            try {
              const response = await github.graphql(query);
              if (response && response.node && response.node.number) {
                return response.node.number;
              } else {
                core.setFailed("Failed to retrieve issue number from node ID.");
                return null;
              }
            } catch (error) {
              core.setFailed(`GraphQL query failed: ${error.message}`);
              return null;
            }

      - name: Checkout do código
        uses: actions/checkout@v2

      - name: Obter conteúdo da issue
        id: obter_issue
        uses: actions/github-script@v6
        with:
          script: |
            const issueNumber = ${{ steps.get_issue_number.outputs.result }};
            if (!issueNumber) return;

            try{
              const issueBody = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
              }).then(result => result.data.body);

              if (!issueBody) {
                console.log(`Issue number ${issueNumber} body not found.`);
                return;
              }

              return issueBody;
            } catch (error) {
              core.setFailed(`Failed to retrieve issue body: ${error.message}`);
              return;
            }

      - name: Validar respostas do quiz
        id: validar_respostas
        uses: actions/github-script@v6
        with:
          script: |
            const issueBody = ${{ steps.obter_issue.outputs.result }};
            const issueNumber = ${{ steps.get_issue_number.outputs.result }};
            if (!issueBody || !issueNumber) return;

            const respostasCorretas = {
              "1": "Uma disciplina.",
              "2": "Sim.",
              "3": "Um padrão de design que permite injetar dependências, proporcionando baixo acoplamento.",
              "4": "*IoC* estabelece que as abstrações não devem depender de implementações concretas, enquanto *DIP* define que os módulos de alto nível não devem depender dos módulos de baixo nível."
            };

            const respostasUsuario = {};
            const perguntas = issueBody.split("# ");

            perguntas.slice(1).forEach(pergunta => {
              const numeroPergunta = pergunta.split(" - ")[0];
              const opcoes = pergunta.split("- [");

              opcoes.slice(1).forEach(opcao => {
                if (opcao.startsWith("x")) {
                  respostasUsuario[numeroPergunta] = opcao.split("] ")[1].trim();
                }
              });
            });

            let feedback = "## Resultado do Quiz\n\n";
            let todasCorretas = true;

            for (const numeroPergunta in respostasCorretas) {
              if (respostasUsuario[numeroPergunta] === respostasCorretas[numeroPergunta]) {
                feedback += `✅ Pergunta ${numeroPergunta}: Resposta correta!\n`;
              } else {
                feedback += `❌ Pergunta ${numeroPergunta}: Resposta incorreta. Resposta correta: ${respostasCorretas[numeroPergunta]}\n`;
                todasCorretas = false;
              }
            }

            if (todasCorretas) {
              feedback += "\nParabéns! Você acertou todas as perguntas do quiz.";
              core.setOutput('todas_corretas', 'true');
            } else {
              feedback += "\nPor favor, revise suas respostas e tente novamente.";
              core.setOutput('todas_corretas', 'false');
            }

            try{
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: feedback,
              });
            } catch(error){
              core.setFailed(`Failed to create issue comment: ${error.message}`);
            }

      - name: Move Card to Done (If All Correct)
        if: steps.validar_respostas.outputs.todas_corretas == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const projectId = "${{ github.event.inputs.project_id }}";
            const issueNumber = ${{ steps.get_issue_number.outputs.result }};

            try{
              const columns = await github.rest.projects.listColumns({
                project_id: projectId,
                per_page: 100
              });

              if (columns.data.length < 3) {
                core.setFailed("Project does not have at least three columns.");
                return;
              }

              const doneColumn = columns.data[2]; // Assumes the third column is "Done"

              let issueCard = null;

              for (const column of columns.data) {
                const cards = await github.rest.projects.listCards({
                  column_id: column.id,
                  per_page: 100
                });

                issueCard = cards.data.find(card => card.content_url === `https://api.github.com/repos/${context.repo.owner}/${context.repo.repo}/issues/${issueNumber}`);

                if (issueCard) {
                  break;
                }
              }

              if (issueCard) {
                await github.rest.projects.moveCard({
                  card_id: issueCard.id,
                  position: "top",
                  column_id: doneColumn.id,
                });
              } else {
                core.setFailed("Issue card not found in any column of the project.");
              }
            } catch (error) {
              core.setFailed(`Error moving card: ${error.message}`);
            }
