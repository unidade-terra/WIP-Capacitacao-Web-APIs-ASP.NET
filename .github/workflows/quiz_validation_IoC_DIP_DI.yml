name: Validar Quiz IoC, DIP e DI (Primeira Alternativa Correta)

on:
  workflow_dispatch:
    inputs:
      content_node_id:
        description: 'The content node ID (Issue ID)'
        required: true
        type: string
      project_id:
        description: 'The project ID'
        required: true
        type: string
      other_project_data:
        description: 'The full json payload of the github project event'
        required: true
        type: string

permissions: write-all

jobs:
  move_issue:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/github-script@v6
        env:
          APP_ID: 1185682
        with:
          script: |
            const jwt = require('jsonwebtoken');
            const fs = require('fs');

            const appId = process.env.APP_ID;
            const privateKey = process.env.APP_PRIVATE_KEY;

            const now = Math.floor(Date.now() / 1000);
            const payload = {
              iat: now,
              exp: now + (10 * 60),
              iss: appId,
            };

            const token = jwt.sign(payload, privateKey, { algorithm: 'RS256' });

            const installationQuery = `
              query {
                viewer {
                  installations(first: 100) {
                    nodes {
                      id
                      appId
                      account {
                        __typename
                        ... on Organization {
                          login
                        }
                        ... on User {
                          login
                        }
                      }
                    }
                  }
                }
              }
            `;

            const installationResponse = await github.graphql(installationQuery, {
              headers: {
                authorization: `Bearer ${token}`,
              },
            });

            const installations = installationResponse.viewer.installations.nodes;
            const appInstallation = installations.find(installation => installation.appId === parseInt(appId));

            if (!appInstallation) {
              core.setFailed(`GitHub App installation not found.`);
              return;
            }

            const installationId = appInstallation.id;

            const response = await fetch(`https://api.github.com/app/installations/${installationId}/access_tokens`, {
              method: 'POST',
              headers: {
                Authorization: `Bearer ${token}`,
                Accept: 'application/vnd.github.v3+json`,
              },
            });

            if (!response.ok) {
              throw new Error(`Failed to get installation access token: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            console.log(`token=${data.token}`);
            core.setOutput('token', data.token);

      - name: Move issue 6 to Done Column (GraphQL)
        uses: actions/github-script@v6
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const projectId = "${{ github.event.inputs.project_id }}";
            const issueNumber = 6;

            console.log(`Moving issue #${issueNumber} to Done in project: ${projectId}`);

            const projectItemsQuery = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                    fields(first: 100) {
                      nodes {
                        id
                        name
                        ... on ProjectV2ItemFieldSingleSelect {
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            try {
              const projectItemsResult = await github.graphql(projectItemsQuery);
              const projectItems = projectItemsResult.node.items.nodes;

              console.log(`[DEBUG] projectItems: ${JSON.stringify(projectItems)}`);

              const item = projectItems.find(i => i.content?.number === issueNumber);

              if (!item) {
                core.setFailed(`Issue ${issueNumber} not found in project.`);
                return;
              }

              console.log(`[DEBUG] item.id: ${item.id}`);

              const doneColumn = projectItemsResult.node.fields.nodes.find(field => field.__typename === "ProjectV2ItemFieldSingleSelect" && field.name === "Done");

              if (!doneColumn) {
                core.setFailed("Done column not found in project.");
                return;
              }

              const doneOption = doneColumn.options.find(option => option.name === "Done");

              if (!doneOption) {
                core.setFailed("Done option not found in Done column.");
                return;
              }

              const moveIssueMutation = `
                mutation {
                  updateProjectV2ItemPosition(input: {
                    projectId: "${projectId}",
                    itemId: "${item.id}",
                    afterId: null,
                    fieldValueId: "${doneOption.id}"
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;

              const moveResult = await github.graphql(moveIssueMutation);
              console.log(`[DEBUG] Move Issue Result: ${JSON.stringify(moveResult)}`);

            } catch (error) {
              core.setFailed(`Error moving issue: ${error.message}`);
              console.error(`Error: ${error}`);
            }
